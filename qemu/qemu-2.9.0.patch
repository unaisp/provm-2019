diff -u5 -rNX exclude-qemu qemu-2.9.0/balloon.c ../qemu/qemu-2.9.0/balloon.c
--- qemu-2.9.0/balloon.c	2016-12-20 21:46:42.000000000 +0530
+++ ../qemu/qemu-2.9.0/balloon.c	2017-06-06 06:04:51.399762074 +0530
@@ -33,10 +33,15 @@
 #include "qmp-commands.h"
 #include "qapi/qmp/qerror.h"
 #include "qapi/qmp/qjson.h"
 
 static QEMUBalloonEvent *balloon_event_fn;
+/* Added by Bhavesh Singh. 2017.06.02. Begin add */
+static QEMUSSDBalloonEvent *ssd_balloon_event_fn;
+static void *ssd_balloon_opaque;
+/* Added by Bhavesh Singh. 2017.06.02. End add */
+
 static QEMUBalloonStatus *balloon_stat_fn;
 static void *balloon_opaque;
 static bool balloon_inhibited;f
 
 bool qemu_balloon_is_inhibited(void)
@@ -114,5 +119,47 @@
     }
 
     trace_balloon_event(balloon_opaque, target);
     balloon_event_fn(balloon_opaque, target);
 }
+
+
+/* Added by Bhavesh Singh. 2017.06.02. Begin add */
+void qmp_ssd_balloon(int64_t target, Error **errp)
+{
+//    if (!have_balloon(errp)) {
+//        return;
+//    }
+    if(!ssd_balloon_event_fn)
+        return;
+//    if (target <= 0) {
+//        error_setg(errp, QERR_INVALID_PARAMETER_VALUE, "target", "a size");
+//        return;
+//    }
+
+//    trace_balloon_event(balloon_opaque, target);
+    ssd_balloon_event_fn(ssd_balloon_opaque, target);
+}
+int qemu_add_ssd_balloon_handler(QEMUSSDBalloonEvent *event_func, void *opaque)
+{
+    if (ssd_balloon_event_fn || ssd_balloon_opaque) {
+        /* We're already registered one balloon handler.  How many can
+         * a guest really have?
+         */
+        return -1;
+    }
+    ssd_balloon_event_fn = event_func;
+    //balloon_stat_fn = stat_func;
+   ssd_balloon_opaque = opaque;
+    return 0;
+}
+
+void qemu_remove_ssd_balloon_handler(void *opaque)
+{
+    if (ssd_balloon_opaque != opaque) {
+        return;
+    }
+    ssd_balloon_event_fn = NULL;
+    //balloon_stat_fn = NULL;
+    ssd_balloon_opaque = NULL;
+}
+/* Added by Bhavesh Singh. 2017.06.02. End add */
diff -u5 -rNX exclude-qemu qemu-2.9.0/.gitignore ../qemu/qemu-2.9.0/.gitignore
--- qemu-2.9.0/.gitignore	2016-12-20 21:46:42.000000000 +0530
+++ ../qemu/qemu-2.9.0/.gitignore	2017-04-06 16:13:53.245972640 +0530
@@ -3,10 +3,11 @@
 /config-all-disas.*
 /config-host.*
 /config-target.*
 /config.status
 /config-temp
+/build
 /trace-events-all
 /trace/generated-tracers.h
 /trace/generated-tracers.c
 /trace/generated-tracers-dtrace.h
 /trace/generated-tracers.dtrace
diff -u5 -rNX exclude-qemu qemu-2.9.0/hmp.c ../qemu/qemu-2.9.0/hmp.c
--- qemu-2.9.0/hmp.c	2016-12-20 21:46:42.000000000 +0530
+++ ../qemu/qemu-2.9.0/hmp.c	2017-06-06 06:07:46.257565934 +0530
@@ -1145,10 +1145,23 @@
     if (err) {
         error_report_err(err);
     }
 }
 
+/* Added by Bhavesh Singh. 2017.06.02. Begin add */
+void hmp_ssd_balloon(Monitor *mon, const QDict *qdict)
+{
+    int64_t value = qdict_get_int(qdict, "value");
+    Error *err = NULL;
+
+    qmp_ssd_balloon(value, &err);
+    if (err) {
+        error_report_err(err);
+    }
+}
+/* Added by Bhavesh Singh. 2017.06.02. End add */
+
 void hmp_block_resize(Monitor *mon, const QDict *qdict)
 {
     const char *device = qdict_get_str(qdict, "device");
     int64_t size = qdict_get_int(qdict, "size");
     Error *err = NULL;
diff -u5 -rNX exclude-qemu qemu-2.9.0/hmp.h ../qemu/qemu-2.9.0/hmp.h
--- qemu-2.9.0/hmp.h	2016-12-20 21:46:42.000000000 +0530
+++ ../qemu/qemu-2.9.0/hmp.h	2017-06-06 06:04:20.520152736 +0530
@@ -55,10 +55,13 @@
 void hmp_system_wakeup(Monitor *mon, const QDict *qdict);
 void hmp_nmi(Monitor *mon, const QDict *qdict);
 void hmp_set_link(Monitor *mon, const QDict *qdict);
 void hmp_block_passwd(Monitor *mon, const QDict *qdict);
 void hmp_balloon(Monitor *mon, const QDict *qdict);
+/* Added by Bhavesh Singh. 2017.06.02. Begin add */
+void hmp_ssd_balloon(Monitor *mon, const QDict *qdict);
+/* Added by Bhavesh Singh. 2017.06.02. End add */
 void hmp_block_resize(Monitor *mon, const QDict *qdict);
 void hmp_snapshot_blkdev(Monitor *mon, const QDict *qdict);
 void hmp_snapshot_blkdev_internal(Monitor *mon, const QDict *qdict);
 void hmp_snapshot_delete_blkdev_internal(Monitor *mon, const QDict *qdict);
 void hmp_drive_mirror(Monitor *mon, const QDict *qdict);
diff -u5 -rNX exclude-qemu qemu-2.9.0/hw/block/Makefile.objs ../qemu/qemu-2.9.0/hw/block/Makefile.objs
--- qemu-2.9.0/hw/block/Makefile.objs	2016-12-20 21:46:42.000000000 +0530
+++ ../qemu/qemu-2.9.0/hw/block/Makefile.objs	2017-05-10 02:20:30.000668821 +0530
@@ -11,5 +11,9 @@
 
 obj-$(CONFIG_SH4) += tc58128.o
 
 obj-$(CONFIG_VIRTIO) += virtio-blk.o
 obj-$(CONFIG_VIRTIO) += dataplane/
+
+# Added by Bhavesh Singh. 2017.05.10. Begin add #
+obj-y += virtio-vssd.o
+# Added by Bhavesh Singh. 2017.05.10. End add #
\ No newline at end of file
diff -u5 -rNX exclude-qemu qemu-2.9.0/hw/block/virtio-vssd.c ../qemu/qemu-2.9.0/hw/block/virtio-vssd.c
--- qemu-2.9.0/hw/block/virtio-vssd.c	1970-01-01 05:30:00.000000000 +0530
+++ ../qemu/qemu-2.9.0/hw/block/virtio-vssd.c	2017-06-24 04:27:07.240024954 +0530
@@ -0,0 +1,446 @@
+/*
+ * Virtio VSSD Support
+ *
+ * Copyright Indian Institute of Technology Bombay. 2017
+ * Copyright Bhavesh Singh <bhavesh@cse.iitb.ac.in>
+ *
+ * This work is licensed under the terms of GNU GPL, version 3.
+ * See the COPYING file in the top-level directory.
+ */
+
+#include "qemu/osdep.h"
+#include "qemu/iov.h"
+#include "qemu/timer.h"
+#include "qemu-common.h"
+#include "hw/virtio/virtio.h"
+#include "hw/i386/pc.h"
+#include "sysemu/balloon.h"
+#include "hw/virtio/virtio-balloon.h"
+#include "sysemu/kvm.h"
+#include "exec/address-spaces.h"
+#include "qapi/visitor.h"
+#include "qapi-event.h"
+#include "trace.h"
+
+#include "hw/virtio/virtio-bus.h"
+#include "hw/virtio/virtio-access.h"
+
+#include "qemu-common.h"
+#include "hw/virtio/virtio.h"
+#include "hw/virtio/virtio-vssd.h"
+
+static void virtio_vssd_free_request(VirtIOVssdReq *vssdReq)
+{
+    if (vssdReq) {
+        g_free(vssdReq);
+    }
+}
+
+static inline uint64_t virtio_vssd_map_offset(uint64_t sector) {
+    // Some dummy fixed offset for now. Will need to have access to
+    // shared state where the mappings for all VMs are maintained.
+    return (sector + SECTOR_OFFSET) << SECTOR_SHIFT;
+}
+
+static uint32_t virtio_vssd_get_balloon_size(VirtIOVssd *vssd) {
+    uint32_t i=0, total_sectors = 0;
+    uint32_t *list = vssd->block_list;
+    for(; i<vssd->capacity; i++) {
+        if((list[i/32] & (1 << (i%32))) == (1 << (i%32))) {
+            total_sectors++;
+        }
+    }
+    return total_sectors;
+}
+
+// The guest has freed blocks that we maintain a list of here too.
+static void virtio_vssd_free_blocks(struct VirtIOVssd *vssd, struct VirtIOVssdResizeInfo *resize_info) {
+    uint32_t i=0, total_sectors = abs(resize_info->status);
+    uint64_t sector_num;
+    uint32_t *list = vssd->block_list;
+    for(;i<abs(total_sectors);i++) {
+        sector_num = resize_info->sector_list[i];
+        list[sector_num/32] |= (1 << (sector_num % 32));
+    }
+    resize_info->ack = resize_info->status;
+    //printf("%u\n", virtio_vssd_get_balloon_size(vssd));
+}
+
+// We tell the guest which blocks to map again.
+static void virtio_vssd_map_blocks(struct VirtIOVssd *vssd, struct VirtIOVssdResizeInfo *resize_info) {
+    uint32_t i=0, j=0, total_sectors = resize_info->status;
+    uint32_t *list = vssd->block_list;
+    for(;i<vssd->capacity && j<total_sectors; i++) {
+        if((list[i/32] & (1 << (i%32))) == (1 << (i%32))) {
+            list[i/32] &= ~(1 << (i%32));
+            resize_info->sector_list[j++] = i;
+        }
+    }
+    //printf("%u\n", virtio_vssd_get_balloon_size(vssd));
+}
+
+static void virtio_vssd_handle_resize(VirtIODevice *vdev, VirtQueue *vq)
+{
+    VirtIOVssdResizeInfo resize_info;
+    VirtIOVssd *vssd = (VirtIOVssd *)vdev;
+    VirtQueueElement *elem;
+    struct iovec *iov;
+    uint32_t in_num;
+    int sign;
+
+    //static int x = 0;
+
+    //printf("virtio_vssd_backend: Control virtqueue kick received!\n");
+
+//    vssd->ctrl_vq_elem = virtqueue_pop(vq, sizeof(VirtQueueElement));
+
+//    iov = vssd->ctrl_vq_elem->in_sg;
+//    in_num = vssd->ctrl_vq_elem->in_num;
+//    iov_to_buf(iov, in_num, 0, &resize_info, sizeof(resize_info));
+
+//    printf("virtio_vssd_backend: Status: %d, Ack %d", resize_info.status, resize_info.ack);
+    while((elem = virtqueue_pop(vq, sizeof(VirtQueueElement))) != NULL) {
+        iov = elem->in_sg;
+        in_num = elem->in_num;
+        iov_to_buf(iov, in_num, 0, &resize_info, sizeof(resize_info));
+        sign = resize_info.status < 0 ? -1 : 1;
+        if(resize_info.status < 0) {
+            // We set the ack to the number of sectors we were able to recover from the list, while still maintaining the sign for direction.
+//            if(resize_info.status != -1) {
+//                resize_info.ack = resize_info.status + 1; // All but one sectors unmapped successfully!
+//                resize_info.sector_list[0] = 1298; // Sector 1298 was not unmapped successfully. We put it back in the sector list.
+//            } else
+//                resize_info.ack = resize_info.status;
+            virtio_vssd_free_blocks(vssd, &resize_info);
+            vssd->command -= sign*(resize_info.status - resize_info.ack);            
+        } else if(resize_info.status > 0) {
+            if(resize_info.ack != -1) // This means that this is an ack from the guest
+                vssd->command -= sign*(resize_info.status - resize_info.ack);
+            else if(resize_info.ack == -1) // This means this is a new command
+                resize_info.ack = 0; // We don't want the guest logic to go awry
+            if(abs(resize_info.status-resize_info.ack) != 0) {
+                // We need to set the sectors for the given number.
+                virtio_vssd_map_blocks(vssd, &resize_info);
+            } else {
+                // We end the processing of this resize request here.
+                resize_info.status = 0;
+                resize_info.ack = 0;
+            }
+        }
+
+//        QEMUIOVector qiov;
+//        qemu_iovec_init_external(&qiov, iov, elem->out_num);
+
+//        printf("virtio_vssd_backend: Status: %d, First Sector: %llu\n", resize_info.status, resize_info.sector_list[0]);
+//        if(resize_info.status == 0) {
+            // We need to figure out what to do! Its a status query from the guest.
+
+            // Case 1: We ask for sectors from the guest
+//            if(x==0) {
+//                resize_info.status = -8;
+//                x = 1;
+//            }
+            // Case 2: We give back sectors to guest
+//            if(x==0) {
+//                resize_info.status = 5;
+//                x = 1;
+//                int i;
+//                for(i=0;i<abs(resize_info.status); i++) {
+//                    resize_info.sector_list[i] = (i+12)*5;
+//                }
+//            }
+//        }
+//        else if(resize_info.status < 0) {
+//            // We have got a reply from the guest alongwith the desired number of sectors
+//            printf("virtio_vssd_backend: Sector numbers obtained from guest: %llu", resize_info.sector_list[1298]);
+//            //int i;
+//            //for(i=0;i<abs(resize_info.status); i++) {
+//            //    printf(" %llu", resize_info.sector_list[i]);
+//            //}
+//            printf("\n");
+//            resize_info.status = 0; // We set the status to zero now or to another negative number if we want more.
+//        }
+
+        iov_from_buf(iov, in_num, 0, &resize_info, sizeof(resize_info));
+        virtqueue_push(vq, elem, sizeof(resize_info));
+        virtio_notify(vdev, vq);
+    }
+//    virtqueue_push(vssd->ctrl_vq, vssd->ctrl_vq_elem, sizeof(resize_info));
+//    virtio_notify(vdev, vq);
+    if(vssd->command != 0) {
+        virtio_notify_config(vdev);
+    } else if(vssd->command == 0 && resize_info.status == resize_info.ack) {
+        /* Added by Bhavesh Singh. 2017.06.16. Begin add */
+        // The command has completed successfully
+        //printf("virtio_vssd_backend: Ballooning finished: %lu %ld\n", (clock() - vssd->clock), CLOCKS_PER_SEC);
+        struct timeval curr;
+        gettimeofday(&curr, 0);
+        uint64_t duration = (curr.tv_sec - vssd->time.tv_sec) * 1e6 + curr.tv_usec - vssd->time.tv_usec;
+
+        uint32_t total_sectors = virtio_vssd_get_balloon_size(vssd);
+
+        printf("virtio_vssd_backend: Ballooning finished: %lu: %u\n", duration, total_sectors);
+        /* Added by Bhavesh Singh. 2017.06.16. End add */
+    }
+}
+
+// We do not need these functions!! The IO is automatically block aligned perhaps also because of the fact
+// that our constant block offset is 4096 bytes, which ensure block boundary alignment.
+/*
+static int32_t virtio_vssd_read(int fd, QEMUIOVector *qiov)
+{
+    uint32_t i, size;
+    char *buffer;
+    int32_t error = 0;
+
+    for(i=0; i<qiov->niov-1; i++) {
+        size = qiov->iov[i].iov_len > SECTOR_SIZE ? (qiov->iov[i].iov_len / SECTOR_SIZE) * SECTOR_SIZE : SECTOR_SIZE;
+        buffer = (char *)aligned_alloc(SECTOR_SIZE, size);
+//        if((error = errno) < 0)
+//            return error;
+        if(buffer == NULL) {
+            error = errno;
+            goto out_error;
+        }
+        if(read(fd, buffer, qiov->iov[i].iov_len) < 0) {
+            error = errno;
+            goto out_error;
+        }
+        strncpy(qiov->iov[i].iov_base, buffer, qiov->iov[i].iov_len);
+    }
+out_error:
+    return error;
+}
+
+static int32_t virtio_vssd_write(int fd, QEMUIOVector *qiov)
+{
+    uint32_t i, size;
+    char *buffer;
+    int32_t error = 0;
+
+    for(i=0; i<qiov->niov; i++) {
+        size = qiov->iov[i].iov_len > SECTOR_SIZE ? (qiov->iov[i].iov_len / SECTOR_SIZE) * SECTOR_SIZE : SECTOR_SIZE;
+        buffer = (char *)aligned_alloc(SECTOR_SIZE, size);
+//        memset(buffer, 0, size);
+//        if((error = errno) < 0)
+//            return error;
+        if(buffer == NULL) {
+            error = errno;
+            goto out_error;
+        }
+        strncpy(buffer, qiov->iov[i].iov_base, qiov->iov[i].iov_len);
+        if(write(fd, buffer, qiov->iov[i].iov_len) < 0) {
+            error = errno;
+            goto out_error;
+        }
+    }
+out_error:
+    return error;
+}
+*/
+
+static void virtio_vssd_handle_request(VirtIODevice *vdev, VirtQueue *vq)
+{
+    VirtIOVssd *vssd = (VirtIOVssd *)vdev;
+    VirtIOVssdReq *vssdReq;
+    struct iovec *iov, *in_iov;
+    uint32_t in_num, out_num, type;
+    bool is_write;
+    uint64_t offset;
+    //printf("virtio_vssd_backend: virtqueue kick received!\n");
+    while((vssdReq = virtqueue_pop(vq, sizeof(VirtIOVssdReq))) != NULL) {
+        //printf("virtio_vssd_backend: virtqueue element popped!\n");
+        vssdReq->vssd = vssd;
+        vssdReq->vq = vq;
+        vssdReq->error = 0;
+        iov = vssdReq->elem.out_sg;
+        in_iov = vssdReq->elem.in_sg;
+        in_num = vssdReq->elem.in_num;
+        out_num = vssdReq->elem.out_num;
+        //printf("virtio_vssd_backend: Out: %u\tIn:%u\n", out_num, in_num);
+        iov_to_buf(iov, out_num, 0, &vssdReq->hdr, sizeof(vssdReq->hdr));
+        //printf("virtio_vssd_backend: hdr.type: %u\thdr.sector_num: %lu\n", vssdReq->hdr.type, vssdReq->hdr.sector_num);
+        iov_discard_front(&iov, &out_num, sizeof(vssdReq->hdr));
+        type = virtio_ldl_p(VIRTIO_DEVICE(vssdReq->vssd), &vssdReq->hdr.type);
+        //printf("virtio_vssd_backend: Type: %u\n", type);
+        is_write = type & VIRTIO_VSSD_WRITE;
+        offset = virtio_vssd_map_offset(virtio_ldq_p(VIRTIO_DEVICE(vssdReq->vssd), &vssdReq->hdr.sector_num));
+        if(lseek(vssd->fd, offset, SEEK_SET) < 0) // Go to the byte offset
+            vssdReq->error = errno;
+        //vssdReq->error = errno < 0 ? errno : 0;
+        if(vssdReq->error < 0)
+            goto push_output;
+
+        if(is_write) {
+            qemu_iovec_init_external(&vssdReq->qiov, iov, out_num);
+            //printf("virtio_vssd_backend: Number of io vectors: %d\n", vssdReq->qiov.niov);
+//            lseek(vssd->fd, offset, SEEK_SET); // Go to the byte offset
+//            vssdReq->error = errno < 0 ? errno : 0;
+//            if(vssdReq->error < 0)
+//                goto push_output;
+            if(writev(vssd->fd, vssdReq->qiov.iov, vssdReq->qiov.niov) < 0)
+                vssdReq->error = errno;
+            //vssdReq->error = virtio_vssd_write(vssd->fd, &vssdReq->qiov);
+            //vssdReq->error = error < 0 ? error : 0;
+            //for(i = 0; i < vssdReq->qiov.niov; i++) {
+            //    snprintf(abc, 4096, "%s", (char*)vssdReq->qiov.iov[i].iov_base);
+            //    abc[4095] = '\0';
+            //    printf("virtio_vssd_backend: Virtio write operation: %s\n", abc);
+            //}
+        } else {
+            qemu_iovec_init_external(&vssdReq->qiov, in_iov, in_num); // The last one is the status word which we do not want to map.
+            //printf("virtio_vssd_backend: Number of io vectors: %d\n", vssdReq->qiov.niov);
+//            lseek(vssd->fd, offset, SEEK_SET); // Go to the byte offset
+//            vssdReq->error = errno < 0 ? errno : 0;
+//            if(vssdReq->error < 0)
+//                goto push_output;
+            if(readv(vssd->fd, vssdReq->qiov.iov, vssdReq->qiov.niov - 1) < 0)
+                vssdReq->error = errno;
+            //int32_t error = virtio_vssd_read(vssd->fd, &vssdReq->qiov);
+            //vssdReq->error = error < 0 ? error : 0;
+            // The following two lines are just for testing whether errors are propagated upwards.
+            //vssdReq->error = -ENOMEM;
+            //goto set_error;
+            //for(i = 0; i < vssdReq->qiov.niov; i++) {
+            //    snprintf((char*)vssdReq->qiov.iov[i].iov_base, vssdReq->qiov.iov[i].iov_len, "Singh");
+            //    //(char*)vssdReq->qiov.iov[i].iov_base[4095] = '\0';
+            //    printf("virtio_vssd_backend: Virtio read operation: %s\n", (char*)vssdReq->qiov.iov[i].iov_base);
+            //}
+        }
+        //printf("virtio_vssd_backend: Length of second in iov: %lu\n", in_iov[in_num - 1].iov_len);
+        //printf("virtio_vssd_backend: Direction: %d\tOut: %u\tIn:%u\tSector: %lu\tSize: %lu\n", is_write, out_num, in_num, sector_num, vssdReq->qiov.size);
+        //virtqueue_detach_element(vq, &vssdReq->elem, vssdReq->qiov.size);
+push_output:
+        *((int*)vssdReq->qiov.iov[vssdReq->qiov.niov - 1].iov_base) = vssdReq->error > 0 ? -vssdReq->error : 0;
+        virtqueue_push(vq, &vssdReq->elem, vssdReq->qiov.size);
+        virtio_notify(vdev, vq);
+        virtio_vssd_free_request(vssdReq);
+        //virtio_blk_handle_vq(s, vq);
+        //virtqueue_push(vq, &vssdReq->elem, 32);
+        //virtio_queue_notify(vdev, 0);
+    }
+}
+
+static void virtio_vssd_get_config(VirtIODevice *vdev, uint8_t *config_data)
+{
+    VirtIOVssd *vssd = VIRTIO_VSSD(vdev);
+    struct virtio_vssd_config config;
+    int sign = vssd->command < 0 ? -1 : 1;
+    config.command = sign*vssd->command > SSD_BALLOON_UNIT ? sign*SSD_BALLOON_UNIT : vssd->command;
+
+    vssd->command -= config.command;
+
+    //vssd->command -= sign*SSD_BALLOON_UNIT;
+    //if(sign*vssd->command < 0)
+    //    vssd->command = 0;
+
+    config.capacity = vssd->capacity;
+    memcpy(config_data, &config, sizeof(struct virtio_vssd_config));
+}
+
+static void virtio_ssd_balloon_to_target(void *opaque, int64_t target)
+{
+    VirtIOVssd *vssd = VIRTIO_VSSD(opaque);
+    VirtIODevice *vdev = VIRTIO_DEVICE(vssd);
+
+    vssd->command += target; // We add to ensure that the direction is preserved.
+
+    /* Added by Bhavesh Singh. 2017.06.16. Begin add */
+    //vssd->clock = clock();
+    gettimeofday(&vssd->time, 0);
+    /* Added by Bhavesh Singh. 2017.06.16. End add */
+
+    virtio_notify_config(vdev);
+
+//    VirtIOVssdResizeInfo resize_info;
+//    VirtIOVssd *vssd = VIRTIO_VSSD(opaque);
+//    VirtIODevice *vdev = VIRTIO_DEVICE(vssd);
+//    struct iovec *iov;
+//    uint32_t in_num;
+
+//    printf("virtio_vssd_backend: Resize called.\n");
+
+//    if(vssd->ctrl_vq_elem == NULL)
+//        return;
+//    iov = vssd->ctrl_vq_elem->in_sg;
+//    in_num = vssd->ctrl_vq_elem->in_num;
+//    iov_to_buf(iov, in_num, 0, &resize_info, sizeof(resize_info));
+//    resize_info.status = target;
+//    iov_from_buf(iov, in_num, 0, &resize_info, sizeof(resize_info));
+//    virtqueue_push(vssd->ctrl_vq, vssd->ctrl_vq_elem, sizeof(resize_info));
+//    virtio_notify(vdev, vssd->ctrl_vq);
+}
+
+static uint64_t virtio_vssd_get_features(VirtIODevice *vdev, uint64_t features, Error **errp)
+{
+    return features;
+}
+
+static void virtio_vssd_device_realize(DeviceState *dev, Error **errp)
+{
+    VirtIODevice *vdev = VIRTIO_DEVICE(dev);
+    VirtIOVssd *vssd = VIRTIO_VSSD(dev);
+
+    strncpy(vssd->backingdevice, "/dev/sdc1", 10);
+
+    // FIXME: See if O_DIRECT works!
+    vssd->fd = open(vssd->backingdevice, O_RDWR | O_DIRECT/* | O_SYNC*/);
+    if(vssd->fd < 0) {
+        error_setg(errp, "Unable to initialize backing SSD state");
+        return;
+    }
+    vssd->ctrl_vq_elem = NULL;
+
+    //vssd->capacity = 67108864; // =2^26 (# of 512 byte sectors; therefore 2^35 bytes or 32GB)
+    //vssd->capacity = 4194304; // =2^22 (# of 512 byte sectors; therefore 2^31 bytes or 2GB)
+    vssd->capacity = 2097152; // =2^21 (# of 512 byte sectors; therefore 2^30 bytes or 1GB)
+    vssd->block_list = calloc(vssd->capacity/32, sizeof(uint32_t)); // We divide by 32 as our array is of unsigned 32 bit integers.
+
+    virtio_init(vdev, "virtio-vssd", VIRTIO_ID_VSSD, sizeof(struct virtio_vssd_config));
+
+    // TODO: What is a good virtqueue size for a block device? We set it to 128.
+    vssd->vq = virtio_add_queue(vdev, 128, virtio_vssd_handle_request);
+    vssd->ctrl_vq = virtio_add_queue(vdev, 128, virtio_vssd_handle_resize);
+
+    qemu_add_ssd_balloon_handler(virtio_ssd_balloon_to_target, vssd);
+}
+
+static void virtio_vssd_device_unrealize(DeviceState *dev, Error **errp)
+{
+    VirtIODevice *vdev = VIRTIO_DEVICE(dev);
+    VirtIOVssd *vssd = VIRTIO_VSSD(dev);
+    qemu_remove_ssd_balloon_handler(vssd);
+    virtio_del_queue(vdev, 0);
+    virtio_cleanup(vdev);
+}
+
+static Property virtio_vssd_properties[] = {
+    DEFINE_PROP_END_OF_LIST(),
+};
+
+static void virtio_vssd_class_init(ObjectClass *klass, void *data)
+{
+    DeviceClass *dc = DEVICE_CLASS(klass);
+    VirtioDeviceClass *vdc = VIRTIO_DEVICE_CLASS(klass);
+
+    dc->props = virtio_vssd_properties;
+    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
+    vdc->realize = virtio_vssd_device_realize;
+    vdc->unrealize = virtio_vssd_device_unrealize;
+    vdc->get_config = virtio_vssd_get_config;
+    vdc->get_features = virtio_vssd_get_features;
+}
+
+static const TypeInfo virtio_vssd_info = {
+    .name = TYPE_VIRTIO_VSSD,
+    .parent = TYPE_VIRTIO_DEVICE,
+    .instance_size = sizeof(VirtIOVssd),
+    .class_init = virtio_vssd_class_init,
+};
+
+static void virtio_register_types(void)
+{
+    type_register_static(&virtio_vssd_info);
+}
+
+type_init(virtio_register_types)
diff -u5 -rNX exclude-qemu qemu-2.9.0/hw/virtio/virtio.c ../qemu/qemu-2.9.0/hw/virtio/virtio.c
--- qemu-2.9.0/hw/virtio/virtio.c	2016-12-20 21:46:42.000000000 +0530
+++ ../qemu/qemu-2.9.0/hw/virtio/virtio.c	2017-05-29 15:49:23.645190754 +0530
@@ -273,10 +273,15 @@
  * not be pushed or discarded.
  */
 void virtqueue_detach_element(VirtQueue *vq, const VirtQueueElement *elem,
                               unsigned int len)
 {
+    /* Added by Deba. 2017.05.29. Begin Add. */
+    if(vq->inuse <= 0)
+         printf("Inuse is bad\n");
+    /* Added by Deba. 2017.05.29. End Add. */
+
     vq->inuse--;
     virtqueue_unmap_sg(vq, elem, len);
 }
 
 /* virtqueue_unpop:
diff -u5 -rNX exclude-qemu qemu-2.9.0/hw/virtio/virtio-pci.c ../qemu/qemu-2.9.0/hw/virtio/virtio-pci.c
--- qemu-2.9.0/hw/virtio/virtio-pci.c	2016-12-20 21:46:42.000000000 +0530
+++ ../qemu/qemu-2.9.0/hw/virtio/virtio-pci.c	2017-03-19 20:29:33.022165928 +0530
@@ -23,10 +23,13 @@
 #include "hw/virtio/virtio-net.h"
 #include "hw/virtio/virtio-serial.h"
 #include "hw/virtio/virtio-scsi.h"
 #include "hw/virtio/virtio-balloon.h"
 #include "hw/virtio/virtio-input.h"
+/* Added by Bhavesh Singh. 2017.02.03. Begin add */
+#include "hw/virtio/virtio-vssd.h"
+/* Added by Bhavesh Singh. 2017.02.03. End add */
 #include "hw/pci/pci.h"
 #include "qapi/error.h"
 #include "qemu/error-report.h"
 #include "hw/pci/msi.h"
 #include "hw/pci/msix.h"
@@ -2360,10 +2363,61 @@
     .instance_size = sizeof(VirtIORngPCI),
     .instance_init = virtio_rng_initfn,
     .class_init    = virtio_rng_pci_class_init,
 };
 
+/* Added by Bhavesh Singh. 2017.02.03. Begin add */
+/* virtio-vssd-pci */
+
+static Property virtio_vssd_pci_properties[] = {
+    DEFINE_PROP_END_OF_LIST(),
+};
+
+static void virtio_vssd_pci_realize(VirtIOPCIProxy *vpci_dev, Error **errp)
+{
+    VirtIOVssdPCI *vssd = VIRTIO_VSSD_PCI(vpci_dev);
+    DeviceState *vdev = DEVICE(&vssd->vdev);
+
+    qdev_set_parent_bus(vdev, BUS(&vpci_dev->bus));
+    object_property_set_bool(OBJECT(vdev), true, "realized", errp);
+}
+
+static void virtio_vssd_pci_class_init(ObjectClass *klass, void *data)
+{
+    DeviceClass *dc = DEVICE_CLASS(klass);
+    VirtioPCIClass *k = VIRTIO_PCI_CLASS(klass);
+    PCIDeviceClass *pcidev_k = PCI_DEVICE_CLASS(klass);
+
+    k->realize = virtio_vssd_pci_realize;
+    dc->props = virtio_vssd_pci_properties;
+    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
+
+    pcidev_k->vendor_id = PCI_VENDOR_ID_REDHAT_QUMRANET;
+    pcidev_k->device_id = PCI_DEVICE_ID_VIRTIO_VSSD;
+    pcidev_k->revision = VIRTIO_PCI_ABI_VERSION;
+    pcidev_k->class_id = PCI_CLASS_OTHERS;
+}
+
+static void virtio_vssd_pci_instance_init(Object *obj)
+{
+    VirtIOVssdPCI *dev = VIRTIO_VSSD_PCI(obj);
+
+    virtio_instance_init_common(obj, &dev->vdev, sizeof(dev->vdev),
+                                TYPE_VIRTIO_VSSD);
+    /*object_property_add_alias(obj, "vssd", OBJECT(&dev->vdev), "vssd",
+      &error_abort);*/
+}
+
+static const TypeInfo virtio_vssd_pci_info = {
+    .name          = TYPE_VIRTIO_VSSD_PCI,
+    .parent        = TYPE_VIRTIO_PCI,
+    .instance_size = sizeof(VirtIOVssdPCI),
+    .instance_init = virtio_vssd_pci_instance_init,
+    .class_init    = virtio_vssd_pci_class_init,
+};
+/* Added by Bhavesh Singh. 2017.02.03. End add */
+
 /* virtio-input-pci */
 
 static Property virtio_input_pci_properties[] = {
     DEFINE_PROP_UINT32("vectors", VirtIOPCIProxy, nvectors, 2),
     DEFINE_PROP_END_OF_LIST(),
@@ -2554,8 +2608,11 @@
     type_register_static(&vhost_scsi_pci_info);
 #endif
 #ifdef CONFIG_VHOST_VSOCK
     type_register_static(&vhost_vsock_pci_info);
 #endif
+    /* Added by Bhavesh Singh. 2017.02.10. Begin add */
+    type_register_static(&virtio_vssd_pci_info);
+    /* Added by Bhavesh Singh. 2017.02.10. End add */
 }
 
 type_init(virtio_pci_register_types)
diff -u5 -rNX exclude-qemu qemu-2.9.0/hw/virtio/virtio-pci.h ../qemu/qemu-2.9.0/hw/virtio/virtio-pci.h
--- qemu-2.9.0/hw/virtio/virtio-pci.h	2016-12-20 21:46:42.000000000 +0530
+++ ../qemu/qemu-2.9.0/hw/virtio/virtio-pci.h	2017-02-03 23:50:49.146272837 +0530
@@ -24,10 +24,13 @@
 #include "hw/virtio/virtio-balloon.h"
 #include "hw/virtio/virtio-bus.h"
 #include "hw/virtio/virtio-input.h"
 #include "hw/virtio/virtio-gpu.h"
 #include "hw/virtio/virtio-crypto.h"
+/* Added by Bhavesh Singh. 2017.02.03. Begin add */
+#include "hw/virtio/virtio-vssd.h"
+/* Added by Bhavesh Singh. 2017.02.03. End add */
 
 #ifdef CONFIG_VIRTFS
 #include "hw/9pfs/virtio-9p.h"
 #endif
 #ifdef CONFIG_VHOST_SCSI
@@ -49,10 +52,13 @@
 typedef struct VirtIOInputHIDPCI VirtIOInputHIDPCI;
 typedef struct VirtIOInputHostPCI VirtIOInputHostPCI;
 typedef struct VirtIOGPUPCI VirtIOGPUPCI;
 typedef struct VHostVSockPCI VHostVSockPCI;
 typedef struct VirtIOCryptoPCI VirtIOCryptoPCI;
+/* Added by Bhavesh Singh. 2017.02.03. Begin add */
+typedef struct VirtIOVssdPCI VirtIOVssdPCI;
+/* Added by Bhavesh Singh. 2017.02.03. End add */
 
 /* virtio-pci-bus */
 
 typedef struct VirtioBusState VirtioPCIBusState;
 typedef struct VirtioBusClass VirtioPCIBusClass;
@@ -364,9 +370,23 @@
 struct VirtIOCryptoPCI {
     VirtIOPCIProxy parent_obj;
     VirtIOCrypto vdev;
 };
 
+/* Added by Bhavesh Singh. 2017.02.03. Begin add */
+/*
+ * virtio-vssd-pci: This extends VirtioPCIProxy.
+ */
+#define TYPE_VIRTIO_VSSD_PCI "virtio-vssd-pci"
+#define VIRTIO_VSSD_PCI(obj) \
+    OBJECT_CHECK(VirtIOVssdPCI, (obj), TYPE_VIRTIO_VSSD_PCI)
+
+struct VirtIOVssdPCI {
+    VirtIOPCIProxy parent_obj;
+    VirtIOVssd vdev;
+};
+/* Added by Bhavesh Singh. 2017.02.03. End add */
+
 /* Virtio ABI version, if we increment this, we break the guest driver. */
 #define VIRTIO_PCI_ABI_VERSION          0
 
 #endif
diff -u5 -rNX exclude-qemu qemu-2.9.0/include/hw/pci/pci.h ../qemu/qemu-2.9.0/include/hw/pci/pci.h
--- qemu-2.9.0/include/hw/pci/pci.h	2016-12-20 21:46:42.000000000 +0530
+++ ../qemu/qemu-2.9.0/include/hw/pci/pci.h	2017-03-20 12:11:33.223111181 +0530
@@ -82,10 +82,18 @@
 #define PCI_DEVICE_ID_VIRTIO_SCSI        0x1004
 #define PCI_DEVICE_ID_VIRTIO_RNG         0x1005
 #define PCI_DEVICE_ID_VIRTIO_9P          0x1009
 #define PCI_DEVICE_ID_VIRTIO_VSOCK       0x1012
 
+/* Added by Bhavesh Singh. 2017.03.03. Begin add */
+/* This ID does not even matter, since ultimately, the
+ * linux kernel virtio frontend will replace this by the
+ * subdevice id, which is set to the VirtIO device id. */
+#define PCI_DEVICE_ID_VIRTIO_VSSD        0x1036
+/* Older Virtio device numbers started from 0x1041 */
+/* Added by Bhavesh Singh. 2017.03.03. End add */
+
 #define PCI_VENDOR_ID_REDHAT             0x1b36
 #define PCI_DEVICE_ID_REDHAT_BRIDGE      0x0001
 #define PCI_DEVICE_ID_REDHAT_SERIAL      0x0002
 #define PCI_DEVICE_ID_REDHAT_SERIAL2     0x0003
 #define PCI_DEVICE_ID_REDHAT_SERIAL4     0x0004
diff -u5 -rNX exclude-qemu qemu-2.9.0/include/hw/virtio/virtio-vssd.h ../qemu/qemu-2.9.0/include/hw/virtio/virtio-vssd.h
--- qemu-2.9.0/include/hw/virtio/virtio-vssd.h	1970-01-01 05:30:00.000000000 +0530
+++ ../qemu/qemu-2.9.0/include/hw/virtio/virtio-vssd.h	2017-06-22 14:01:15.472807534 +0530
@@ -0,0 +1,75 @@
+/*
+ * Virtio VSSD Support
+ *
+ * Copyright Indian Institute of Technology Bombay. 2017
+ * Copyright Bhavesh Singh <bhavesh@cse.iitb.ac.in>
+ *
+ * This work is licensed under the terms of GNU GPL, version 3.
+ * See the COPYING file in the top-level directory.
+ */
+
+#ifndef QEMU_VIRTIO_VSSD_H
+#define QEMU_VIRTIO_VSSD_H
+
+#include "standard-headers/linux/virtio_ids.h"
+
+#define TYPE_VIRTIO_VSSD "virtio-vssd"
+#define VIRTIO_VSSD(obj) \
+    OBJECT_CHECK(VirtIOVssd, (obj), TYPE_VIRTIO_VSSD)
+#define VIRTIO_VSSD_GET_PARENT_CLASS(obj) \
+    OBJECT_GET_PARENT_CLASS(obj, TYPE_VIRTIO_VSSD)
+
+#define SSD_BALLOON_UNIT 4096//2046
+
+#define VIRTIO_VSSD_READ 0
+#define VIRTIO_VSSD_WRITE 1
+#define SSD_NAME_LEN 256
+#define SECTOR_OFFSET 4096
+#define SECTOR_SHIFT 9
+#define SECTOR_SIZE 512
+
+struct virtio_vssd_config {
+//    int32_t status;
+    int32_t command;
+    uint64_t capacity;
+};
+
+typedef struct VirtIOVssd {
+    VirtIODevice parent_obj;
+    VirtQueue *vq, *ctrl_vq;
+    VirtQueueElement *ctrl_vq_elem;
+//    struct virtio_vssd_config conf;
+
+    int64_t command; // the outstanding number of sectors yet to be processed
+    uint64_t capacity; // The capacity of the disk (# of 512-byte sectors)
+    uint32_t *block_list; // bitmap of valid guest sector numbers; use this to choose sectors to free
+
+    char backingdevice[SSD_NAME_LEN];
+    int fd;
+
+    /* Added by Bhavesh Singh. 2017.06.16. Begin add */
+    struct timeval time;
+    /* Added by Bhavesh Singh. 2017.06.16. End add */
+} VirtIOVssd;
+
+typedef struct VirtIOVssdHdr {
+    uint32_t type;
+    uint64_t sector_num;
+} VirtIOVssdHdr;
+
+typedef struct VirtIOVssdReq {
+    VirtQueueElement elem;
+    VirtIOVssdHdr hdr;
+    VirtIOVssd *vssd;
+    VirtQueue *vq;
+    QEMUIOVector qiov;
+    int32_t error;
+} VirtIOVssdReq;
+
+typedef struct VirtIOVssdResizeInfo {
+    int32_t status;
+    int32_t ack;
+    uint64_t sector_list[SSD_BALLOON_UNIT];
+} VirtIOVssdResizeInfo;
+
+#endif
diff -u5 -rNX exclude-qemu qemu-2.9.0/include/standard-headers/linux/virtio_ids.h ../qemu/qemu-2.9.0/include/standard-headers/linux/virtio_ids.h
--- qemu-2.9.0/include/standard-headers/linux/virtio_ids.h	2016-12-20 21:46:42.000000000 +0530
+++ ../qemu/qemu-2.9.0/include/standard-headers/linux/virtio_ids.h	2017-03-20 11:53:21.195951114 +0530
@@ -41,6 +41,14 @@
 #define VIRTIO_ID_CAIF	       12 /* Virtio caif */
 #define VIRTIO_ID_GPU          16 /* virtio GPU */
 #define VIRTIO_ID_INPUT        18 /* virtio input */
 #define VIRTIO_ID_VSOCK        19 /* virtio vsock transport */
 #define VIRTIO_ID_CRYPTO       20 /* virtio crypto */
+
+/* Added by Bhavesh Singh. 2017.02.03. Begin add */
+/* It might not be immediately apparent here but this is used to set
+ * the Virtio Device Id, which, in turn, is used to set the PCI subsystem ID
+ * which is used by the frontend linux virtio driver to set the PCI device id
+ * ignoring the PCI device ID, it uses the subsystem ID. */
+#define VIRTIO_ID_VSSD         54 /* virtio virtual ssd */
+/* Added by Bhavesh Singh. 2017.02.03. End add */
 #endif /* _LINUX_VIRTIO_IDS_H */
diff -u5 -rNX exclude-qemu qemu-2.9.0/include/sysemu/balloon.h ../qemu/qemu-2.9.0/include/sysemu/balloon.h
--- qemu-2.9.0/include/sysemu/balloon.h	2016-12-20 21:46:42.000000000 +0530
+++ ../qemu/qemu-2.9.0/include/sysemu/balloon.h	2017-06-06 06:03:25.368852611 +0530
@@ -15,10 +15,17 @@
 #define QEMU_BALLOON_H
 
 #include "qapi-types.h"
 
 typedef void (QEMUBalloonEvent)(void *opaque, ram_addr_t target);
+
+/* Added by Bhavesh Singh. 2017.06.02. Begin add */
+typedef void (QEMUSSDBalloonEvent)(void *opaque, int64_t target);
+int qemu_add_ssd_balloon_handler(QEMUSSDBalloonEvent *event_func, void *opaque);
+void qemu_remove_ssd_balloon_handler(void *opaque);
+/* Added by Bhavesh Singh. 2017.06.02. End add */
+
 typedef void (QEMUBalloonStatus)(void *opaque, BalloonInfo *info);
 
 int qemu_add_balloon_handler(QEMUBalloonEvent *event_func,
 			     QEMUBalloonStatus *stat_func, void *opaque);
 void qemu_remove_balloon_handler(void *opaque);
diff -u5 -rNX exclude-qemu qemu-2.9.0/Makefile ../qemu/qemu-2.9.0/Makefile
--- qemu-2.9.0/Makefile	2016-12-20 21:46:42.000000000 +0530
+++ ../qemu/qemu-2.9.0/Makefile	2017-03-27 15:17:01.126454731 +0530
@@ -1,7 +1,6 @@
 # Makefile for QEMU.
-
 # Always point to the root of the build tree (needs GNU make).
 BUILD_DIR=$(CURDIR)
 
 # Before including a proper config-host.mak, assume we are in the source tree
 SRC_PATH=.
diff -u5 -rNX exclude-qemu qemu-2.9.0/qdev-monitor.c ../qemu/qemu-2.9.0/qdev-monitor.c
--- qemu-2.9.0/qdev-monitor.c	2016-12-20 21:46:42.000000000 +0530
+++ ../qemu/qemu-2.9.0/qdev-monitor.c	2017-02-05 13:46:15.442982312 +0530
@@ -72,10 +72,13 @@
     { "virtio-scsi-pci", "virtio-scsi", QEMU_ARCH_ALL & ~QEMU_ARCH_S390X },
     { "virtio-serial-ccw", "virtio-serial", QEMU_ARCH_S390X },
     { "virtio-serial-pci", "virtio-serial", QEMU_ARCH_ALL & ~QEMU_ARCH_S390X },
     { "virtio-tablet-ccw", "virtio-tablet", QEMU_ARCH_S390X },
     { "virtio-tablet-pci", "virtio-tablet", QEMU_ARCH_ALL & ~QEMU_ARCH_S390X },
+    /* Added by Bhavesh Singh. 2017.02.05. Begin add */
+    {"virtio-vssd-pci", "virtio-vssd", QEMU_ARCH_ALL & ~QEMU_ARCH_S390X },
+    /* Added by Bhavesh Singh. 2017.02.05. End add */
     { }
 };
 
 static const char *qdev_class_get_alias(DeviceClass *dc)
 {
